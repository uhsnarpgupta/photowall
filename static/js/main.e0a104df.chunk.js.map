{"version":3,"sources":["Components/Title.js","Components/Photo.js","Components/Photowall.js","Components/AddPhoto.js","database/config.js","redux/actions.js","Components/Comments.js","Components/Single.js","Components/Main.js","Components/App.js","data/postList.js","redux/reducer.js","index.js"],"names":["Component","Photo","props","post","className","to","id","src","imageLink","alt","description","onClick","startRemovingPost","index","history","push","comments","length","proTypes","PropTypes","object","isRequired","onRemovePhoto","func","PhotoWall","posts","sort","x","y","map","key","AddPhoto","handleSubmit","e","preventDefault","target","elements","value","Number","Date","startAddingPost","onSubmit","this","name","placeholder","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","dispatch","ref","update","then","addPost","catch","error","console","log","startLoadingPost","once","snapshot","forEach","childSnapshot","val","loadPosts","updates","removePost","startAddingComment","comment","postId","addComment","startLoadingComments","Object","values","loadComments","type","Comments","hidden","Single","match","params","find","findIndex","loading","Main","state","setState","exact","path","render","onHistory","screen","App","withRouter","connect","ownprops","actionCreators","bindActionCreators","postList","store","rootReducer","combineReducers","action","slice","middleware","React","createElement","thunk","ReactReduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","navigator","userAgent","includes","createStore","compose","applyMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e0a104df.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Title extends Component {\n  render() {\n    return <h1>{this.props.title}</h1>;\n  }\n}\n\nexport default Title;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nfunction Photo(props) {\n  const post = props.post;\n  return (\n    <figure className=\"figure\">\n      <Link to={`/single/${post.id}`}>\n        <img className=\"photo\" src={post.imageLink} alt={post.description} />\n      </Link>\n      <figcaption>\n        <p>{post.description}</p>\n      </figcaption>\n      <div className=\"button-container\">\n        <button\n          className=\"remove-button\"\n          onClick={() => {\n            // props.onRemovePhoto(post);\n            //props.removePost(props.index);\n            props.startRemovingPost(props.index, post.id);\n            props.history.push(\"/\");\n          }}\n        >\n          Remove\n        </button>\n        <Link className=\"button\" to={`/single/${post.id}`}>\n          <div className=\"comment-count\">\n            <div className=\"speech-bubble\"></div>\n            {props.comments[post.id] ? props.comments[post.id].length : 0}\n          </div>\n        </Link>\n      </div>\n    </figure>\n  );\n}\n\nPhoto.proTypes = {\n  post: PropTypes.object.isRequired,\n  onRemovePhoto: PropTypes.func.isRequired,\n};\n\nexport default Photo;\n","import React from \"react\";\nimport Photo from \"./Photo\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nfunction PhotoWall(props) {\n  return (\n    <div>\n      <Link className=\"addIcon\" to=\"/AddPhoto\" />\n      {/*   \n        <a onClick={props.onNavigate} className=\"addIcon\" href=\"#AddPhoto\" />\n    \n        <button onClick={props.onNavigate} className=\"addIcon\" />\n       */}\n      <div className=\"photoGrid\">\n        {props.posts\n          .sort(function (x, y) {\n            return y.id - x.id;\n          })\n          .map((post, index) => (\n            <Photo\n              key={index}\n              post={post}\n              {...props}\n              index={index}\n              // onRemovePhoto={props.onRemovePhoto}\n            />\n          ))}\n      </div>\n    </div>\n  );\n}\n\nPhotoWall.propTypes = {\n  posts: PropTypes.array.isRequired,\n  //onRemovePhoto: PropTypes.func.isRequired,\n};\n\nexport default PhotoWall;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport serializeForm from \"form-serialize\";\n\nclass AddPhoto extends Component {\n  /* constructor() {\n    super();\n  } */\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const imageLink = e.target.elements.imageLink.value;\n    const description = e.target.elements.description.value;\n\n    /* const values = serializeForm(e.target, { hash: true });\n    if (values[\"imageLink\"] && values[\"description\"]) {\n      values.id = Number(new Date());\n      this.props.addPost(values.id, values.imageLink, values.description);\n      this.props.history.push(\"/\");\n    } */\n\n    const post = {\n      id: Number(new Date()),\n      description: description,\n      imageLink: imageLink,\n    };\n    if (imageLink && description) {\n      //this.props.onAddPhoto(post);\n      //this.props.addPost(post);\n      this.props.startAddingPost(post);\n      this.props.history.push(\"/\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"add-post\">\n        <div className=\"form\" onSubmit={this.handleSubmit}>\n          <form className=\"add-form\">\n            <input name=\"imageLink\" placeholder=\"Link\" />\n            <input name=\"description\" placeholder=\"Description\" />\n            <button>Post</button>\n          </form>\n        </div>\n      </div>\n\n      /* <div>\n        <h1> Photos </h1> \n        <div className=\"form\">\n          <form onSubmit={this.handleSubmit}>\n            <input type=\"text\" placeholder=\"Link\" name=\"link\" />\n            <input type=\"text\" placeholder=\"Description\" name=\"description\" />\n            <button> Post </button>\n          </form>\n        </div>\n      </div> */\n    );\n  }\n}\n\n/* AddPhoto.propTypes = {\n  addPost: PropTypes.func.isRequired,\n}; */\n\nexport default AddPhoto;\n","import * as firebase from \"firebase\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDhw-DwLNo2Ed1XfYJbRLJB6o59LXL4LY4\",\n  authDomain: \"photowall-4b47d.firebaseapp.com\",\n  databaseURL: \"https://photowall-4b47d.firebaseio.com\",\n  projectId: \"photowall-4b47d\",\n  storageBucket: \"photowall-4b47d.appspot.com\",\n  messagingSenderId: \"140731132897\",\n  appId: \"1:140731132897:web:7e0acb59f606f44bcf40a0\",\n  measurementId: \"G-WNMW1ZWRE8\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst database = firebase.database();\n\nexport { database };\n","import { database } from \"../database/config\";\n\nexport function startAddingPost(post) {\n  return (dispatch) => {\n    return database\n      .ref(\"posts\")\n      .update({ [post.id]: post })\n      .then(() => {\n        dispatch(addPost(post));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n}\n\nexport function startLoadingPost() {\n  return (dispatch) => {\n    return database\n      .ref(\"posts\")\n      .once(\"value\")\n      .then((snapshot) => {\n        let posts = [];\n        snapshot.forEach((childSnapshot) => {\n          posts.push(childSnapshot.val());\n        });\n        dispatch(loadPosts(posts));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n}\n\n/* export function startRemovingPost(index, id) {\n  return (dispatch) => {\n    return database\n      .ref(`posts/${id}`)\n      .remove()\n      .then(() => {\n        dispatch(removePost(index));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n}\n */\n\nexport function startRemovingPost(index, id) {\n  const updates = {\n    [`posts/${id}`]: null,\n    [`comments/${id}`]: null,\n  };\n  /* this specifies the paths that we want to update to null \n      (basically delete)\n      we're navigating to the post with id we clicked remove on, \n      as well as the comments belonging to that post, with \n      that same id. */\n\n  return (dispatch) => {\n    return database\n      .ref()\n      .update(updates)\n      .then(() => {\n        dispatch(removePost(index));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n}\n\n/*finally, we're updating the database from its root node, such\n      that it navigates to the posts path, as well as the comments\n       path, and  sets them to null ! (in other words, deletes both\n      of them). \n      After deleting the post and its comments from the database,\n      like always, we're updating\n      the ui by dispatching an action to our reducer \n      inside of .then() */\n\nexport function startAddingComment(comment, postId) {\n  return (dispatch) => {\n    return database\n      .ref(`comments/${postId}`)\n      .push(comment)\n      .then(() => {\n        dispatch(addComment(comment, postId));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n}\n\nexport function startLoadingComments() {\n  return (dispatch) => {\n    return database\n      .ref(\"comments\")\n      .once(\"value\")\n      .then((snapshot) => {\n        let comments = {};\n        snapshot.forEach((childSnapshot) => {\n          comments[childSnapshot.key] = Object.values(childSnapshot.val());\n        });\n        dispatch(loadComments(comments));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n}\n\nexport function removePost(index) {\n  return {\n    type: \"REMOVE_POST\",\n    index: index,\n  };\n}\n\nexport function addPost(post) {\n  return {\n    type: \"ADD_POST\",\n    post,\n  };\n}\n\nexport function addComment(comment, postId) {\n  return {\n    type: \"ADD_COMMENT\",\n    comment,\n    postId,\n  };\n}\n\nexport function loadPosts(posts) {\n  return {\n    type: \"LOAD_POSTS\",\n    posts,\n  };\n}\n\nexport function loadComments(comments) {\n  return {\n    type: \"LOAD_COMMENTS\",\n    comments,\n  };\n}\n","import React, { Component } from \"react\";\n\nclass Comments extends Component {\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const comment = e.target.elements.comment.value;\n    this.props.startAddingComment(comment, this.props.id);\n    e.target.elements.comment.value = \"\";\n  };\n\n  render() {\n    return (\n      <div className=\"comment\">\n        {this.props.comments.map((comment, index) => {\n          return <p key={index}> {comment}</p>;\n        })}\n        <form className=\"comment-form\" onSubmit={this.handleSubmit}>\n          <input type=\"text\" placeholder=\"comments\" name=\"comment\" />\n          <input type=\"submit\" hidden />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Comments;\n","import React, { Component } from \"react\";\nimport Photo from \"./Photo\";\nimport Comments from \"./Comments\";\n\nclass Single extends Component {\n  render() {\n    const { match, posts } = this.props;\n    const id = Number(match.params.id);\n    const post = posts.find((post) => post.id === id);\n    const comments = this.props.comments[id] || [];\n    const index = this.props.posts.findIndex((post) => post.id === id);\n    console.log(post);\n\n    if (this.props.loading === true) {\n      return <div className=\"loader\"> ...loading </div>;\n    } else if (post) {\n      return (\n        <div className=\"single-photo\">\n          <Photo post={post} {...this.props} index={index}></Photo>\n          <Comments\n            startAddingComment={this.props.startAddingComment}\n            comments={comments}\n            id={id}\n          />\n        </div>\n      );\n    } else {\n      /*\n        when remove post on single page, and click back button, it will crash as post does not exists anymore and needs handing\n        */\n      return <h1>...no post found</h1>;\n    }\n  }\n}\n\nexport default Single;\n","import React, { Component } from \"react\";\nimport Title from \"./Title\";\nimport PhotoWall from \"./Photowall\";\nimport AddPhoto from \"./AddPhoto\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { removePost } from \"../redux/actions\";\nimport { Link } from \"react-router-dom\";\nimport Single from \"./Single\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  /*  componentDidMount() {\n    this.props.removePost(1);\n  } */\n\n  /*\n  introduced to fix crash when reloading of single component page occurs, it says id not found as posts are not loaded; \n  it is called component state\n  */\n  state = {\n    loading: true,\n  };\n\n  componentDidMount() {\n    this.props.startLoadingPost().then(() => {\n      this.setState({ loading: false });\n    });\n    this.props.startLoadingComments();\n  }\n\n  render() {\n    // console.log(this.state.posts);\n    //console.log(this.props.posts);\n    console.log(this.props);\n\n    return (\n      <div>\n        <h1 className=\"font-face\">\n          <Link to=\"/\">Photowall</Link>\n        </h1>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <div>\n              {/* <Title title={\"Photowall\"} /> */}\n              {/* <PhotoWall\n                posts={this.state.posts}\n                onRemovePhoto={this.removePhoto}\n                onNavigate={this.navigate}\n              /> */}\n              {/*               <PhotoWall posts={this.props.posts} />\n               */}\n              <PhotoWall {...this.props} />\n            </div>\n          )}\n        />\n        {/*         <Route path=\"/AddPhoto\" component={AddPhoto} />\n         */}\n\n        <Route\n          path=\"/AddPhoto\"\n          render={(history) => (\n            /* <AddPhoto\n              onAddPhoto={(addedPost) => {\n                console.log(addedPost);\n                this.addPhoto(addedPost);\n                history.push(\"/\");\n              }}\n            /> */\n            <AddPhoto {...this.props} onHistory={history} />\n          )}\n        />\n        <Route\n          path=\"/single/:id\"\n          render={(params) => (\n            <Single loading={this.state.loading} {...this.props} {...params} />\n          )}\n        />\n      </div>\n    );\n  }\n\n  /* removePhoto(postRemoved) {\n    console.log(postRemoved.description);\n    this.setState((state) => ({\n      posts: state.posts.filter((post) => post !== postRemoved),\n    }));\n  } */\n\n  navigate() {\n    this.setState({\n      screen: \"addPhoto\",\n    });\n  }\n\n  /* addPhoto(postSubmitted) {\n    this.setState((state) => ({\n      posts: state.posts.concat([postSubmitted]),\n    }));\n  } */\n}\n\n/* function mapStateToProps(state) {\n  return {\n    posts: state,\n  };\n} */\n\n// export default connect(mapStateToProps)(Main);\nexport default Main;\n","import Main from \"./Main\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  removePost,\n  addPost,\n  addComment,\n  startAddingPost,\n  startLoadingPost,\n  startRemovingPost,\n  startAddingComment,\n  startLoadingComments,\n} from \"../redux/actions\";\nimport { withRouter } from \"react-router\";\nimport * as actionCreators from \"../redux/actions\";\n\nfunction mapStateToProps(state, ownprops) {\n  return {\n    posts: state.posts,\n    comments: state.comments,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  //   return bindActionCreators({ removePost }, dispatch);\n  console.log(actionCreators);\n  return bindActionCreators(\n    {\n      removePost,\n      addPost,\n      addComment,\n      startAddingPost,\n      startLoadingPost,\n      startRemovingPost,\n      startAddingComment,\n      startLoadingComments,\n    },\n    dispatch\n  );\n\n  //return bindActionCreators({ actionCreators }, dispatch);\n}\n\nconst App = withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\n\nexport default App;\n","const postList = [];\n\nexport default postList;\n","import postList from \"../data/postList\";\nimport { combineReducers } from \"redux\";\n\n/* const commentReducer =  */\nfunction comments(state = {}, action) {\n  console.log(\"commentReducer\");\n  console.log(action.comment);\n  console.log(action.postId);\n\n  switch (action.type) {\n    case \"ADD_COMMENT\":\n      if (!state[action.postId]) {\n        return { ...state, [action.postId]: [action.comment] };\n      } else {\n        return {\n          ...state,\n          [action.postId]: [...state[action.postId], action.comment],\n        };\n      }\n    case \"LOAD_COMMENTS\":\n      return action.comments;\n    default:\n      return state;\n  }\n}\n\n/* const postReducer =  */\nfunction posts(state = postList, action) {\n  console.log(\"postReducer\");\n\n  console.log(action.index);\n\n  switch (action.type) {\n    case \"REMOVE_POST\":\n      return [\n        ...state.slice(0, action.index),\n        ...state.slice(action.index + 1),\n      ];\n\n    case \"ADD_POST\":\n      return [...state, action.post];\n\n    case \"LOAD_POSTS\":\n      return action.posts;\n\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({ posts, comments });\n\n/* export default postReducer;*/\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport \"./styles/stylesheet.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport postReducer from \"./redux/reducer\";\nimport { Provider } from \"react-redux\";\nimport Main from \"./Components/Main\";\nimport rootReducer from \"./redux/reducer\";\nimport thunk from \"redux-thunk\";\nimport { database } from \"./database/config\";\n\nconst element = React.createElement(\"h1\", null, \"Hello World!\");\n\nconst middleware = [thunk];\n\n/* const store = createStore(\n  rootReducer,\n  compose(\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION__(),\n    applyMiddleware(...middleware)\n  )\n); */\n\nlet store;\nconst ReactReduxDevTools =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\n  store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(...middleware),\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\n        window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n  );\n} else {\n  store = createStore(rootReducer, compose(applyMiddleware(...middleware)));\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}